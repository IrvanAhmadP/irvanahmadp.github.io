{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","className","Navbar","expand","fixed","Container","Brand","href","Toggle","aria-controls","Collapse","id","Nav","style","width","Item","Link","fluid","padding","Jumbotron","class","Row","marginTop","portofolioData","map","portofolioDataRow","i","Col","key","Card","Image","variant","rounded","src","imageUrl","alt","title","Body","Title","url","Text","content","roundedCircle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2+BAsGeA,MAtFf,WACE,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAQC,OAAO,KAAKF,UAAU,gBAAgBG,MAAM,OAClD,kBAACC,EAAA,EAAD,KACE,kBAACH,EAAA,EAAOI,MAAR,CAAcC,KAAK,KAAnB,kBACA,kBAACL,EAAA,EAAOM,OAAR,CAAeC,gBAAc,eAC7B,kBAACP,EAAA,EAAOQ,SAAR,CAAiBC,GAAG,cAClB,kBAACC,EAAA,EAAD,CAAKX,UAAU,sBAAsBY,MAAO,CAAEC,MAAO,SACnD,kBAACF,EAAA,EAAIG,KAAL,KACE,kBAACH,EAAA,EAAII,KAAL,CAAUT,KAAK,SAAf,SAEF,kBAACK,EAAA,EAAIG,KAAL,KACE,kBAACH,EAAA,EAAII,KAAL,CAAUT,KAAK,eAAf,eAEF,kBAACK,EAAA,EAAIG,KAAL,KACE,kBAACH,EAAA,EAAII,KAAL,CAAUT,KAAK,UAAf,cAMV,kBAACF,EAAA,EAAD,CAAWY,OAAK,EAACJ,MAAO,CAACK,QAAU,YACjC,kBAACC,EAAA,EAAD,CAAWR,GAAG,OAAOV,UAAU,mFAC7B,8CACA,uBAAGmB,MAAM,MAAT,qBAEF,kBAACD,EAAA,EAAD,CAAWR,GAAG,aAAaV,UAAU,sFACnC,kBAACoB,EAAA,EAAD,KACE,2CAEF,kBAAChB,EAAA,EAAD,CAAWQ,MAAO,CAACS,UAAY,SAC7B,kBAACD,EAAA,EAAD,KAEIE,EAAeC,KAAI,SAACC,EAAmBC,GAApB,OACjB,kBAACC,EAAA,EAAD,CAAK1B,UAAU,sBAAsB2B,IAAMF,GACzC,kBAACG,EAAA,EAAD,CAAM5B,UAAU,aACd,yBAAKA,UAAU,yBACb,kBAAC6B,EAAA,EAAD,CAAOC,QAAQ,MAAMC,SAAO,EAAC/B,UAAU,iBAAiBgC,IAAMR,EAAkBS,SAAWC,IAAMV,EAAkBW,SAErH,kBAACP,EAAA,EAAKQ,KAAN,KACE,kBAACR,EAAA,EAAKS,MAAN,KACE,uBAAGrC,UAAU,YAAYM,KAAMkB,EAAkBc,IAAKH,MAAOX,EAAkBW,OAC3EX,EAAkBW,QAGxB,kBAACP,EAAA,EAAKW,KAAN,KACIf,EAAkBgB,kBAUtC,kBAACtB,EAAA,EAAD,CAAWR,GAAG,QAAQV,UAAU,2FAC9B,kBAACoB,EAAA,EAAD,KACE,+CAEF,kBAACA,EAAA,EAAD,KACE,kBAACS,EAAA,EAAD,CAAOY,eAAa,EAACzC,UAAU,gBAAgBgC,IAhE9C,mBAgE2DE,IAAI,2BAElE,kBAACd,EAAA,EAAD,KACE,uBAAGpB,UAAU,qBAAb,kBAIF,kBAACoB,EAAA,EAAD,KACE,uBAAGpB,UAAU,uBAAwBmC,MAAM,WAAY7B,KAAK,+DAC1D,kBAAC,IAAD,OAEF,uBAAGN,UAAU,uBAAwBmC,MAAM,SAAU7B,KAAK,yCACxD,kBAAC,IAAD,OAEF,uBAAGN,UAAU,uBAAwBmC,MAAM,SAAU7B,KAAK,mCACtD,kBAAC,IAAD,YCjFIoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a9d0bdd5.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Container, Navbar, Nav, Jumbotron, Row, Col, Image, Card\n} from 'react-bootstrap';\nimport { FaLinkedin, FaGithub, FaMedium } from \"react-icons/fa\";\n\n/* data */\nimport portofolioData from './assets/data/portofolioData'\n\n/* style */\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './assets/css/app.css';\n\n/* images */\nlet Avatar = '/img/avatar.webp';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar expand=\"lg\" className=\"custom-navbar\" fixed=\"top\">\n        <Container>\n          <Navbar.Brand href='#'>Irvan Ahmad P.</Navbar.Brand>\n          <Navbar.Toggle aria-controls='navbar-nav'/>\n          <Navbar.Collapse id='navbar-nav'>\n            <Nav className=\"justify-content-end\" style={{ width: \"100%\" }}>\n              <Nav.Item>\n                <Nav.Link href=\"#home\">Home</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link href=\"#portofolio\">Portofolio</Nav.Link>\n              </Nav.Item>\n              <Nav.Item>\n                <Nav.Link href=\"#about\">About</Nav.Link>\n              </Nav.Item>\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      <Container fluid style={{padding : '0px 0px' }}>\n        <Jumbotron id=\"home\" className=\"d-flex flex-column align-items-center justify-content-center content-full-cover\">\n          <h1>Irvan Ahmad P.</h1>\n          <p class=\"h3\">Professional Bio</p>\n        </Jumbotron>\n        <Jumbotron id=\"portofolio\" className=\"d-flex flex-column align-items-center justify-content-center content-full bg-white\">\n          <Row>\n            <h2>Portofolio</h2>\n          </Row>\n          <Container style={{marginTop : '25px'}}>\n            <Row>\n              {\n                portofolioData.map((portofolioDataRow, i) =>\n                  <Col className=\"col-portofolio-wrap\" key={ i }>\n                    <Card className=\"card-wrap\">\n                      <div className=\"image-protofolio-wrap\">\n                        <Image variant=\"top\" rounded className=\"img-portofolio\" src={ portofolioDataRow.imageUrl } alt={ portofolioDataRow.title }/>\n                      </div>\n                      <Card.Body>\n                        <Card.Title>\n                          <a className=\"text-dark\" href={portofolioDataRow.url} title={portofolioDataRow.title}>\n                            { portofolioDataRow.title }\n                          </a>\n                        </Card.Title>\n                        <Card.Text>\n                          { portofolioDataRow.content }\n                        </Card.Text>\n                      </Card.Body>\n                    </Card>\n                  </Col>\n                )\n              }\n            </Row>\n          </Container>\n        </Jumbotron>\n        <Jumbotron id=\"about\" className=\"d-flex flex-column align-items-center justify-content-center content-full bg-light mb-0\">\n          <Row>\n            <h2>Irvan Ahmad P.</h2>\n          </Row>\n          <Row>\n            <Image roundedCircle className=\"photo-profile\" src={Avatar} alt=\"Avatar Irvan Ahmad P.\"/>\n          </Row>\n          <Row>\n            <p className=\"h4 text-secondary\">\n              Web Developer\n            </p>\n          </Row>\n          <Row>\n            <a className=\"btn btn-light btn-lg\"  title=\"Linkedin\"  href=\"https://www.linkedin.com/in/irvan-ahmad-prasetya-6306a8115/\">\n              <FaLinkedin/>\n            </a>\n            <a className=\"btn btn-light btn-lg\"  title=\"Github\"  href=\"https://github.com/IrvanAhmadPrasetya\">\n              <FaGithub/>\n            </a>\n            <a className=\"btn btn-light btn-lg\"  title=\"Medium\"  href=\"https://medium.com/@IrvanAhmadP\">\n                <FaMedium/>\n              </a>\n          </Row>\n        </Jumbotron>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}